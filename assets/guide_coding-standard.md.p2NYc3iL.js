import{_ as i,c as t,o as a,a4 as e}from"./chunks/framework.D40SqJrm.js";const k=JSON.parse('{"title":"代码规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/coding-standard.md","filePath":"guide/coding-standard.md"}'),n={name:"guide/coding-standard.md"};function l(o,s,p,d,h,r){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请确保已阅读《<a href="./start.html#开发环境">准备工作 - 开发环境</a>》，并且按照文档说明安装好相关软件及扩展。</p></div><p>为保证代码风格统一，请使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> 做为开发 IDE ，框架源码里已提供相关配置文件，可直接测试效果：在保存代码时，会自动对当前文件进行代码格式化操作。</p><h2 id="ide-配置" tabindex="-1">IDE 配置 <a class="header-anchor" href="#ide-配置" aria-label="Permalink to &quot;IDE 配置&quot;">​</a></h2><p>配置文件为 <code>.editorconfig</code> ，通常情况下无需做任何修改。</p><h2 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h2><p>配置文件为 <code>.eslintrc</code> ，框架使用 <a href="https://github.com/antfu/eslint-config" target="_blank" rel="noreferrer">antfu/eslint-config</a> 做为基础规范，如果你对默认的规则有异议，可以查阅 <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> 官网规则并在 <code>.eslintrc</code> 文件中进行覆盖。</p><p>当你对规则进行修改后，原有的代码可能会因为规则的变动导致编辑器大量提示错误，你可以通过运行 <code>pnpm run lint:eslint</code> 进行一次格式校验，如果规则支持自动修复，则会将不符合规则的代码自动进行格式化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通过修改 <code>.eslintignore</code> 可忽略无需做代码规范校验的文件，例如在项目中导入了一些第三方的插件代码或组件代码，我们就可以将其进行忽略。</p></div><h2 id="stylelint" tabindex="-1">StyleLint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;StyleLint&quot;">​</a></h2><p>配置文件为 <code>.stylelintrc</code> ，如果你对默认的规则有异议，可以查阅 <a href="https://stylelint.io/" target="_blank" rel="noreferrer">Stylelint</a> 官网规则并在 <code>.stylelintrc</code> 文件中进行修改。</p><p>当你对规则进行修改后，原有的代码可能会因为规则的变动导致编辑器大量提示错误，你可以通过运行 <code>pnpm run lint:stylelint</code> 进行一次格式校验，如果规则支持自动修复，则会将不符合规则的代码自动进行格式化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通过修改 <code>.stylelintignore</code> 可忽略无需做代码规范校验的文件，例如在项目中导入了一些第三方的插件代码或组件代码，我们就可以将其进行忽略。</p></div><h2 id="simple-git-hooks-lint-staged" tabindex="-1">simple-git-hooks &amp; lint-staged <a class="header-anchor" href="#simple-git-hooks-lint-staged" aria-label="Permalink to &quot;simple-git-hooks &amp; lint-staged&quot;">​</a></h2><p>由于 IDE 能做的事比较有限，只能对代码的书写规范进行格式化，对于一些无法自动修复的错误代码，如果没有改正到就被推送到 git 仓库，在多人协作开发时，可能会影响到别人的开发体验。所以框架集成了 <a href="https://github.com/toplenboren/simple-git-hooks" target="_blank" rel="noreferrer">simple-git-hooks</a> 和 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a> 这两个依赖来解决这一问题。</p><p>在提交代码时， simple-git-hooks 会通过 lint-staged 对本次提交变更的文件进行分别进行 eslint 和 stylelint 检测，如果有报错，则会阻止本次代码提交，直到开发者修改完所有错误代码后，才允许提交到 git 仓库，这样可以确保 git 仓库里的代码不会有不规范的代码。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>请确保在安装依赖前，已经使用 <code>git init</code> 对项目进行过 git 环境初始化，如果你在安装依赖后再初始化了 git 环境，请在 git 环境初始化之后再执行一遍 <code>pnpm install</code> 安装命令。</p><p>此外，如果 git 仓库目录和框架目录并非同一个，则需要在 <code>package.json</code> 中修改 <code>postinstall</code> 脚本，切换到 git 所在目录。例如 git 目录是 <code>project/</code> ，而框架目录是 <code>project/fantastic-startkit/</code> ，则在 <code>package.json</code> 里找到 <code>simple-git-hooks</code> 配置并修改：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple-git-hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cd ./fantastic-startkit/ &amp;&amp; pnpm lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preserveUnused&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>修改后重新执行一下 <code>pnpm install</code> 即可。</p></div><h3 id="移除" tabindex="-1">移除 <a class="header-anchor" href="#移除" aria-label="Permalink to &quot;移除&quot;">​</a></h3><p>如果不想在 git 提交时强制进行代码规范校验，可以在 <code>package.json</code> 中移除 <code>simple-git-hooks</code> 配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple-git-hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;simple-git-hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preserveUnused&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后手动删除 <code>.git/hooks/pre-commit</code> 文件即可。</p>`,21)]))}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
