import{_ as i,c as a,o as e,a4 as n}from"./chunks/framework.D40SqJrm.js";const c=JSON.parse('{"title":"全局状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/store.md","filePath":"guide/store.md"}'),t={name:"guide/store.md"};function l(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="全局状态管理" tabindex="-1">全局状态管理 <a class="header-anchor" href="#全局状态管理" aria-label="Permalink to &quot;全局状态管理&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">说明</p><p><a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a> 已正式成为 Vue.js 官方状态库，如果你对 Pinia 还不熟悉，我收集了一些文字/视频的介绍，可以帮助你快速上手。</p><ul><li><a href="https://mp.weixin.qq.com/s/_OlLFedVJfyEapGzYFETuw" target="_blank" rel="noreferrer">欧耶！Pinia 正式成为 vuejs 的一员</a></li><li><a href="https://mp.weixin.qq.com/s/4B-ZzOXdYrF-Auvm_wWBVQ" target="_blank" rel="noreferrer">全新的 Vue3 状态管理工具：Pinia</a></li><li><a href="https://www.bilibili.com/video/BV1Mb4y1X7NL/" target="_blank" rel="noreferrer">【探索学习】面向未来的 Vuex -- pinia</a></li></ul></div><p>全局状态文件存放在 <code>/src/store/</code> 目录下，请按模块进行区分。同时请保证文件名和文件内唯一ID保持一致，建议使用 <code>pnpm new</code> 指令进行创建。</p><p>例如新建一个 <code>example.ts</code> 的文件：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> useExampleStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 唯一ID</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    getters: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actions: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用方法：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exampleStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useExampleStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exampleStore.data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exampleStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>`,7)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
